name: CI (PR)

trigger:
    branches:
        include:
            - '*'
pr:
    branches:
        include:
            - '*'

# Variables
variables:
    cache-key: 'npm-/package-lock.json'

# Stages
stages:
    - stage: FormattingAndLwcTests
      displayName: 'Formatting and LWC Tests'
      jobs:
          - job: FormattingAndLwcTestsJob
            displayName: 'Formatting and LWC Tests Job'
            pool:
                vmImage: 'ubuntu-latest'
            steps:
                - task: Checkout@1
                  displayName: 'Checkout source code'

                - task: Cache@2
                  inputs:
                      key: 'npm | $(Build.SourcesDirectory)/package-lock.json'
                      path: 'node_modules'
                  displayName: 'Restore node_modules cache'

                - script: npm ci
                  condition: ne(variables['CACHE_RESTORED'], 'true')
                  displayName: 'Install npm dependencies'

                - script: npm run prettier:verify
                  displayName: 'Code formatting'

                - script: npm run lint
                  displayName: 'Linting'

                - script: npm run test:coverage
                  displayName: 'LWC unit tests'

                - script: |
                      bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN) -f coverage/*.json -F LWC
                  displayName: 'Upload code coverage for LWC to Codecov.io'

    - stage: ScratchOrgTests
      displayName: 'Scratch Org Tests'
      dependsOn: FormattingAndLwcTests
      condition: and(succeeded(), ne(variables['Build.SourceBranchName'], 'dependabot[bot]'))
      jobs:
          - job: ScratchOrgTestsJob
            displayName: 'Scratch Org Tests Job'
            pool:
                vmImage: 'ubuntu-latest'
            steps:
                - script: npm install --location=global @salesforce/cli
                  displayName: 'Install Salesforce CLI'

                - task: Checkout@1
                  displayName: 'Checkout source code'

                - script: |
                      echo "$(DEVHUB_SFDX_URL)" > DEVHUB_SFDX_URL.txt
                      if [[ ! -s DEVHUB_SFDX_URL.txt ]]; then
                        echo "Missing DEVHUB_SFDX_URL secret. Is this workflow running on a fork?"
                        exit 1
                      fi
                  displayName: 'Populate auth file with DEVHUB_SFDX_URL secret'

                - script: sf org login sfdx-url -f DEVHUB_SFDX_URL.txt -a devhub -d
                  displayName: 'Authenticate Dev Hub'

                - script: sf org create scratch -f config/project-scratch-def.json -a streaming-ci -d -y 1
                  displayName: 'Create scratch org'

                - script: sf project deploy start
                  displayName: 'Push source'

                - script: sf org assign permset -n Streaming_Monitor
                  displayName: 'Assign permission set'

                - script: sf apex test run -c -r human -d ./tests/apex -w 20
                  displayName: 'Run Apex tests'

                - script: rm ./tests/apex/test-result-707*-codecoverage.json
                  displayName: 'Delete coverage file (temporary step)'

                - script: |
                      bash <(curl -s https://codecov.io/bash) -t $(CODECOV_TOKEN) -f coverage/*.json -F Apex
                  displayName: 'Upload code coverage for Apex to Codecov.io'

                - script: sf org delete scratch -p -o streaming-ci
                  condition: always()
                  displayName: 'Delete scratch org'
